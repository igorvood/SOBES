Принцип единственной ответственности (Single Responsibility Principle)
Один класс должен решать только какую-то одну задачу. Он может иметь несколько методов, но они должны использоваться лишь для
решения общей задачи. Все методы и свойства должны служить одной цели. Если класс имеет несколько назначений,
его нужно разделить на отдельные классы.

Принцип открытости/закрытости (Open-closed Principle)
Программные сущности (классы, модули, функции и прочее) должны быть расширяемыми без изменения своего содержимого.
Если строго соблюдать этот принцип, то можно регулировать поведение кода без изменения самого исходника.


Принцип подстановки Барбары Лисков (Liskov Substitution Principle)
Пусть φ(x) — доказуемое свойство объекта x типа T. Тогда φ(y) должно быть верным для объектов y типа S, где S — подтип T.

Принцип разделения интерфейса (Interface Segregation Principle)
Нельзя заставлять клиента реализовать интерфейс, которым он не пользуется.
Это означает, что нужно разбивать интерфейсы на более мелкие, лучше удовлетворяющие конкретным потребностям клиентов.

Принцип инверсии зависимостей (Dependency Inversion Principle)
Высокоуровневые модули не должны зависеть от низкоуровневых. Оба вида модулей должны зависеть от абстракций.
